Inefficient solution using 2 for loops

class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = nums[0];
        
        for (int i = 0; i < nums.length; i++) {
            int currentProduct = 1;
            for (int j = i; j < nums.length; j++) {
                currentProduct *= nums[j];
                maxProduct = Math.max(maxProduct, currentProduct);
            }
        }
        
        return maxProduct;
    }
}


=====================================================================================================================================
// Efficient solution 
// O(n) time complexity
// Modifying kadane's algorithm.

class Solution {
    public int maxProduct(int[] nums) {
        int left = 1;
        int right = 1;

        int res=nums[0];

        for(int i = 0; i<nums.length; i++){
            if(left == 0){
                left = 1;
            }
            left = left*nums[i];
            

            if(right == 0){
                right = 1;
            }
            right = right * nums[(nums.length)-1-i];
           

            res = Math.max(res, Math.max(left, right));
        }

        return res;

    }
}